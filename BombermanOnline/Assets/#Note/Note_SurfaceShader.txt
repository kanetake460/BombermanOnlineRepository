〇プリプロセッサ

#pragma surface surf Standard fullforwardshadows
・「surface」:Surfaceシェーダーを定義するためのディレクティブ
・「surf」:Surfaceシェーダーのエントリーポイントとして機能する関数の名前
・「Standard」:Unityのスタンダードライティングモデルを使用することを指定（※シェーダーファミリー）
・「fullforwardshadows」完全な前方連打リンツシャドウをサポートすることを指定

※シェーダーファミリー
シェーダーファミリーを選択することで、開発者は目的に合った最適なシェーダーを使用できるようになります。
・Standard       ：物理ベースのマテリアルを表現するためのスタンダードなライティングモデルを提供します。主にリアルな外観を持つオブジェクトに使用されます。
・Unlit          ：ライティングを無視し、単純なフラットな表示をするためのシェーダーファミリーです。主に 2D ゲームや特定の効果の表現に使用されます。
・Particles      ：パーティクル効果を作成するためのシェーダーファミリーです。パーティクルの色、サイズ、動きなどを制御します。
・UI             ：Unity の UI 要素を描画するためのシェーダーファミリーです。ボタン、テキスト、画像などの UI 要素に適したシェーダーが含まれます。
・Legacy Shaders ：以前のバージョンから引き継がれたシェーダーファミリーで、古いプロジェクトやカスタムシェーダーに使用されることがあります。

// シェーダーがどのバージョンのシェーダーモデルを
// ターゲットにしているかを指定するための命令
#target 3.0


〇Input構造体
インプット構造体で使えるメンバ名はUnityのシェーダープリプロセッサが
特定のデータを自動的にバインドするためのものです。
struct Input
{
    // テクスチャ座標（UV座標）
    float2 uv_<TextureName>;    // メインテクスチャのUV座標
    float2 uv_<SubTextureName>; // 詳細テクスチャのUV座標
    
    // ワールド空間のデータ
    float3 worldPos;            // ワールド空間での位置
    float3 worldRefl;           // ワールド空間での反射ベクトル（主にリフレクションマッピングで使用）
    float3 worldNormal;         // ワールド空間での法線
    float3 worldTangent;        // ワールド空間での接線ベクトル
    float3 worldBinormal;       // ワールド空間での従法線ベクトル
    
    // ビュー空間のデータ
    float3 viewDir;             // ビュー方向ベクトル
    
    // スクリーン空間のデータ
    float4 screenPos;           // スクリーン空間での位置
    
    // ライトデータ
    half3  liteDir;             // ライト方向ベクトル(主にディレク所なるライトに対して)

    // シャドウデータ
    half4 shadowCoord;          // シャドウマップ用の座標

    // 色データ
    fixed4 color;               // 頂点カラー

    // そのほかのデータ
    float ddx;                  // テクスチャ座標のx方向の微分
    float ddy;                  // テクスチャ座標のy方向の微分
};